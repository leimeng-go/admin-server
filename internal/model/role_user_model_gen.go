// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleUserFieldNames          = builder.RawFieldNames(&RoleUser{})
	roleUserRows                = strings.Join(roleUserFieldNames, ",")
	roleUserRowsExpectAutoSet   = strings.Join(stringx.Remove(roleUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleUserRowsWithPlaceHolder = strings.Join(stringx.Remove(roleUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRoleUserIdPrefix           = "cache:roleUser:id:"
	cacheRoleUserRoleIdUserIdPrefix = "cache:roleUser:roleId:userId:"
)

type (
	roleUserModel interface {
		Insert(ctx context.Context, data *RoleUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleUser, error)
		FindOneByRoleIdUserId(ctx context.Context, roleId int64, userId int64) (*RoleUser, error)
		Update(ctx context.Context, data *RoleUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleUserModel struct {
		sqlc.CachedConn
		table string
	}

	RoleUser struct {
		Id         int64        `db:"id"`
		RoleId     int64        `db:"role_id"`     // 角色ID
		UserId     int64        `db:"user_id"`     // 用户ID
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newRoleUserModel(conn sqlx.SqlConn, c cache.NodeConf, opts ...cache.Option) *defaultRoleUserModel {
	return &defaultRoleUserModel{
		CachedConn: sqlc.NewNodeConn(conn, c.NewRedis(), opts...),
		table:      "`role_user`",
	}
}

func (m *defaultRoleUserModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	roleUserIdKey := fmt.Sprintf("%s%v", cacheRoleUserIdPrefix, id)
	roleUserRoleIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheRoleUserRoleIdUserIdPrefix, data.RoleId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, roleUserIdKey, roleUserRoleIdUserIdKey)
	return err
}

func (m *defaultRoleUserModel) FindOne(ctx context.Context, id int64) (*RoleUser, error) {
	roleUserIdKey := fmt.Sprintf("%s%v", cacheRoleUserIdPrefix, id)
	var resp RoleUser
	err := m.QueryRowCtx(ctx, &resp, roleUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleUserModel) FindOneByRoleIdUserId(ctx context.Context, roleId int64, userId int64) (*RoleUser, error) {
	roleUserRoleIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheRoleUserRoleIdUserIdPrefix, roleId, userId)
	var resp RoleUser
	err := m.QueryRowIndexCtx(ctx, &resp, roleUserRoleIdUserIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `role_id` = ? and `user_id` = ? limit 1", roleUserRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, roleId, userId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleUserModel) Insert(ctx context.Context, data *RoleUser) (sql.Result, error) {
	roleUserIdKey := fmt.Sprintf("%s%v", cacheRoleUserIdPrefix, data.Id)
	roleUserRoleIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheRoleUserRoleIdUserIdPrefix, data.RoleId, data.UserId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, roleUserRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.UserId, data.DeleteTime)
	}, roleUserIdKey, roleUserRoleIdUserIdKey)
	return ret, err
}

func (m *defaultRoleUserModel) Update(ctx context.Context, newData *RoleUser) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	roleUserIdKey := fmt.Sprintf("%s%v", cacheRoleUserIdPrefix, data.Id)
	roleUserRoleIdUserIdKey := fmt.Sprintf("%s%v:%v", cacheRoleUserRoleIdUserIdPrefix, data.RoleId, data.UserId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleUserRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RoleId, newData.UserId, newData.DeleteTime, newData.Id)
	}, roleUserIdKey, roleUserRoleIdUserIdKey)
	return err
}

func (m *defaultRoleUserModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRoleUserIdPrefix, primary)
}

func (m *defaultRoleUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleUserModel) tableName() string {
	return m.table
}
