// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleFieldNames          = builder.RawFieldNames(&Role{})
	roleRows                = strings.Join(roleFieldNames, ",")
	roleRowsExpectAutoSet   = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleRowsWithPlaceHolder = strings.Join(stringx.Remove(roleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRoleIdPrefix   = "cache:role:id:"
	cacheRoleCodePrefix = "cache:role:code:"
)

type (
	roleModel interface {
		Insert(ctx context.Context, data *Role) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Role, error)
		FindOneByCode(ctx context.Context, code string) (*Role, error)
		Update(ctx context.Context, data *Role) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleModel struct {
		sqlc.CachedConn
		table string
	}

	Role struct {
		Id          int64          `db:"id"`
		Name        string         `db:"name"`        // 角色名称
		Code        string         `db:"code"`        // 角色编码
		Description sql.NullString `db:"description"` // 角色描述
		CreateTime  time.Time      `db:"create_time"` // 创建时间
		UpdateTime  time.Time      `db:"update_time"` // 更新时间
		DeleteTime  sql.NullTime   `db:"delete_time"` // 删除时间
	}
)

func newRoleModel(conn sqlx.SqlConn, c cache.NodeConf, opts ...cache.Option) *defaultRoleModel {
	return &defaultRoleModel{
		CachedConn: sqlc.NewNodeConn(conn, c.NewRedis(), opts...),
		table:      "`role`",
	}
}

func (m *defaultRoleModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	roleCodeKey := fmt.Sprintf("%s%v", cacheRoleCodePrefix, data.Code)
	roleIdKey := fmt.Sprintf("%s%v", cacheRoleIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, roleCodeKey, roleIdKey)
	return err
}

func (m *defaultRoleModel) FindOne(ctx context.Context, id int64) (*Role, error) {
	roleIdKey := fmt.Sprintf("%s%v", cacheRoleIdPrefix, id)
	var resp Role
	err := m.QueryRowCtx(ctx, &resp, roleIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) FindOneByCode(ctx context.Context, code string) (*Role, error) {
	roleCodeKey := fmt.Sprintf("%s%v", cacheRoleCodePrefix, code)
	var resp Role
	err := m.QueryRowIndexCtx(ctx, &resp, roleCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `code` = ? limit 1", roleRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, code); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleModel) Insert(ctx context.Context, data *Role) (sql.Result, error) {
	roleCodeKey := fmt.Sprintf("%s%v", cacheRoleCodePrefix, data.Code)
	roleIdKey := fmt.Sprintf("%s%v", cacheRoleIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, roleRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Code, data.Description, data.DeleteTime)
	}, roleCodeKey, roleIdKey)
	return ret, err
}

func (m *defaultRoleModel) Update(ctx context.Context, newData *Role) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	roleCodeKey := fmt.Sprintf("%s%v", cacheRoleCodePrefix, data.Code)
	roleIdKey := fmt.Sprintf("%s%v", cacheRoleIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Code, newData.Description, newData.DeleteTime, newData.Id)
	}, roleCodeKey, roleIdKey)
	return err
}

func (m *defaultRoleModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRoleIdPrefix, primary)
}

func (m *defaultRoleModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleModel) tableName() string {
	return m.table
}
