// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleAuthFieldNames          = builder.RawFieldNames(&RoleAuth{})
	roleAuthRows                = strings.Join(roleAuthFieldNames, ",")
	roleAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(roleAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	roleAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(roleAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheRoleAuthIdPrefix           = "cache:roleAuth:id:"
	cacheRoleAuthRoleIdAuthIdPrefix = "cache:roleAuth:roleId:authId:"
)

type (
	roleAuthModel interface {
		Insert(ctx context.Context, data *RoleAuth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleAuth, error)
		FindOneByRoleIdAuthId(ctx context.Context, roleId int64, authId int64) (*RoleAuth, error)
		Update(ctx context.Context, data *RoleAuth) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleAuthModel struct {
		sqlc.CachedConn
		table string
	}

	RoleAuth struct {
		Id         int64        `db:"id"`
		RoleId     int64        `db:"role_id"`     // 角色ID
		AuthId     int64        `db:"auth_id"`     // 权限ID
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
		DeleteTime sql.NullTime `db:"delete_time"` // 删除时间
	}
)

func newRoleAuthModel(conn sqlx.SqlConn, c cache.NodeConf, opts ...cache.Option) *defaultRoleAuthModel {
	return &defaultRoleAuthModel{
		CachedConn: sqlc.NewNodeConn(conn, c.NewRedis(), opts...),
		table:      "`role_auth`",
	}
}

func (m *defaultRoleAuthModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	roleAuthIdKey := fmt.Sprintf("%s%v", cacheRoleAuthIdPrefix, id)
	roleAuthRoleIdAuthIdKey := fmt.Sprintf("%s%v:%v", cacheRoleAuthRoleIdAuthIdPrefix, data.RoleId, data.AuthId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, roleAuthIdKey, roleAuthRoleIdAuthIdKey)
	return err
}

func (m *defaultRoleAuthModel) FindOne(ctx context.Context, id int64) (*RoleAuth, error) {
	roleAuthIdKey := fmt.Sprintf("%s%v", cacheRoleAuthIdPrefix, id)
	var resp RoleAuth
	err := m.QueryRowCtx(ctx, &resp, roleAuthIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleAuthRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleAuthModel) FindOneByRoleIdAuthId(ctx context.Context, roleId int64, authId int64) (*RoleAuth, error) {
	roleAuthRoleIdAuthIdKey := fmt.Sprintf("%s%v:%v", cacheRoleAuthRoleIdAuthIdPrefix, roleId, authId)
	var resp RoleAuth
	err := m.QueryRowIndexCtx(ctx, &resp, roleAuthRoleIdAuthIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `role_id` = ? and `auth_id` = ? limit 1", roleAuthRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, roleId, authId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleAuthModel) Insert(ctx context.Context, data *RoleAuth) (sql.Result, error) {
	roleAuthIdKey := fmt.Sprintf("%s%v", cacheRoleAuthIdPrefix, data.Id)
	roleAuthRoleIdAuthIdKey := fmt.Sprintf("%s%v:%v", cacheRoleAuthRoleIdAuthIdPrefix, data.RoleId, data.AuthId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, roleAuthRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.RoleId, data.AuthId, data.DeleteTime)
	}, roleAuthIdKey, roleAuthRoleIdAuthIdKey)
	return ret, err
}

func (m *defaultRoleAuthModel) Update(ctx context.Context, newData *RoleAuth) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	roleAuthIdKey := fmt.Sprintf("%s%v", cacheRoleAuthIdPrefix, data.Id)
	roleAuthRoleIdAuthIdKey := fmt.Sprintf("%s%v:%v", cacheRoleAuthRoleIdAuthIdPrefix, data.RoleId, data.AuthId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleAuthRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.RoleId, newData.AuthId, newData.DeleteTime, newData.Id)
	}, roleAuthIdKey, roleAuthRoleIdAuthIdKey)
	return err
}

func (m *defaultRoleAuthModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheRoleAuthIdPrefix, primary)
}

func (m *defaultRoleAuthModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleAuthRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultRoleAuthModel) tableName() string {
	return m.table
}
