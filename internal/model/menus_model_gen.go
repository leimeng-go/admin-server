// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	menusFieldNames          = builder.RawFieldNames(&Menus{})
	menusRows                = strings.Join(menusFieldNames, ",")
	menusRowsExpectAutoSet   = strings.Join(stringx.Remove(menusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	menusRowsWithPlaceHolder = strings.Join(stringx.Remove(menusFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMenusIdPrefix = "cache:menus:id:"
)

type (
	menusModel interface {
		Insert(ctx context.Context, data *Menus) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Menus, error)
		Update(ctx context.Context, data *Menus) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMenusModel struct {
		sqlc.CachedConn
		table string
	}

	Menus struct {
		Id                int64          `db:"id"`
		MenuId            int64          `db:"menu_id"`              // 菜单ID
		ParentMenuId      int64          `db:"parent_menu_id"`       // 父菜单ID
		Path              string         `db:"path"`                 // 路由路径
		Name              string         `db:"name"`                 // 组件名
		Component         sql.NullString `db:"component"`            // 组件路径
		Title             string         `db:"title"`                // 菜单名称
		Icon              sql.NullString `db:"icon"`                 // 菜单图标
		ShowBadge         int64          `db:"show_badge"`           // 是否显示徽标
		TextBadge         sql.NullString `db:"text_badge"`           // 文本徽标内容
		IsHide            int64          `db:"is_hide"`              // 是否在菜单中隐藏
		IsHideTab         int64          `db:"is_hide_tab"`          // 是否在标签页中隐藏
		Link              sql.NullString `db:"link"`                 // 外部链接
		IsIframe          int64          `db:"is_iframe"`            // 是否为iframe
		KeepAlive         int64          `db:"keep_alive"`           // 是否缓存
		IsInMainContainer int64          `db:"is_in_main_container"` // 是否在主容器中
		CreatedAt         time.Time      `db:"created_at"`
		UpdatedAt         time.Time      `db:"updated_at"`
		DeletedAt         sql.NullTime   `db:"deleted_at"` // 删除时间
	}
)

func newMenusModel(conn sqlx.SqlConn, c cache.NodeConf, opts ...cache.Option) *defaultMenusModel {
	return &defaultMenusModel{
		CachedConn: sqlc.NewNodeConn(conn, c.NewRedis(), opts...),
		table:      "`menus`",
	}
}

func (m *defaultMenusModel) Delete(ctx context.Context, id int64) error {
	menusIdKey := fmt.Sprintf("%s%v", cacheMenusIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, menusIdKey)
	return err
}

func (m *defaultMenusModel) FindOne(ctx context.Context, id int64) (*Menus, error) {
	menusIdKey := fmt.Sprintf("%s%v", cacheMenusIdPrefix, id)
	var resp Menus
	err := m.QueryRowCtx(ctx, &resp, menusIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menusRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenusModel) Insert(ctx context.Context, data *Menus) (sql.Result, error) {
	menusIdKey := fmt.Sprintf("%s%v", cacheMenusIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, menusRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MenuId, data.ParentMenuId, data.Path, data.Name, data.Component, data.Title, data.Icon, data.ShowBadge, data.TextBadge, data.IsHide, data.IsHideTab, data.Link, data.IsIframe, data.KeepAlive, data.IsInMainContainer, data.DeletedAt)
	}, menusIdKey)
	return ret, err
}

func (m *defaultMenusModel) Update(ctx context.Context, data *Menus) error {
	menusIdKey := fmt.Sprintf("%s%v", cacheMenusIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menusRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MenuId, data.ParentMenuId, data.Path, data.Name, data.Component, data.Title, data.Icon, data.ShowBadge, data.TextBadge, data.IsHide, data.IsHideTab, data.Link, data.IsIframe, data.KeepAlive, data.IsInMainContainer, data.DeletedAt, data.Id)
	}, menusIdKey)
	return err
}

func (m *defaultMenusModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMenusIdPrefix, primary)
}

func (m *defaultMenusModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menusRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMenusModel) tableName() string {
	return m.table
}
