// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.1

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	menuAuthFieldNames          = builder.RawFieldNames(&MenuAuth{})
	menuAuthRows                = strings.Join(menuAuthFieldNames, ",")
	menuAuthRowsExpectAutoSet   = strings.Join(stringx.Remove(menuAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	menuAuthRowsWithPlaceHolder = strings.Join(stringx.Remove(menuAuthFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMenuAuthIdPrefix = "cache:menuAuth:id:"
)

type (
	menuAuthModel interface {
		Insert(ctx context.Context, data *MenuAuth) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MenuAuth, error)
		Update(ctx context.Context, data *MenuAuth) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMenuAuthModel struct {
		sqlc.CachedConn
		table string
	}

	MenuAuth struct {
		Id         int64        `db:"id"`          // 权限ID
		MenuId     int64        `db:"menu_id"`     // 菜单ID
		Title      string       `db:"title"`       // 权限标题
		AuthMark   string       `db:"auth_mark"`   // 权限标识
		CreateTime time.Time    `db:"create_time"` // 创建时间
		UpdateTime time.Time    `db:"update_time"` // 更新时间
		DeletedAt  sql.NullTime `db:"deleted_at"`  // 删除时间
	}
)

func newMenuAuthModel(conn sqlx.SqlConn, c cache.NodeConf, opts ...cache.Option) *defaultMenuAuthModel {
	return &defaultMenuAuthModel{
		CachedConn: sqlc.NewNodeConn(conn, c.NewRedis(), opts...),
		table:      "`menu_auth`",
	}
}

func (m *defaultMenuAuthModel) Delete(ctx context.Context, id int64) error {
	menuAuthIdKey := fmt.Sprintf("%s%v", cacheMenuAuthIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, menuAuthIdKey)
	return err
}

func (m *defaultMenuAuthModel) FindOne(ctx context.Context, id int64) (*MenuAuth, error) {
	menuAuthIdKey := fmt.Sprintf("%s%v", cacheMenuAuthIdPrefix, id)
	var resp MenuAuth
	err := m.QueryRowCtx(ctx, &resp, menuAuthIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuAuthRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuAuthModel) Insert(ctx context.Context, data *MenuAuth) (sql.Result, error) {
	menuAuthIdKey := fmt.Sprintf("%s%v", cacheMenuAuthIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, menuAuthRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.MenuId, data.Title, data.AuthMark, data.DeletedAt)
	}, menuAuthIdKey)
	return ret, err
}

func (m *defaultMenuAuthModel) Update(ctx context.Context, data *MenuAuth) error {
	menuAuthIdKey := fmt.Sprintf("%s%v", cacheMenuAuthIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menuAuthRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.MenuId, data.Title, data.AuthMark, data.DeletedAt, data.Id)
	}, menuAuthIdKey)
	return err
}

func (m *defaultMenuAuthModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMenuAuthIdPrefix, primary)
}

func (m *defaultMenuAuthModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuAuthRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMenuAuthModel) tableName() string {
	return m.table
}
