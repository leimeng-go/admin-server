// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package route

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"admin-server/api/internal/pkg/globalkey"
	"github.com/Masterminds/squirrel"
	"github.com/pkg/errors"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	menuFieldNames          = builder.RawFieldNames(&Menu{})
	menuRows                = strings.Join(menuFieldNames, ",")
	menuRowsExpectAutoSet   = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	menuRowsWithPlaceHolder = strings.Join(stringx.Remove(menuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMenuIdPrefix = "cache:menu:id:"
)

type (
	menuModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Menu, error)
		Update(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error)
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		DeleteSoft(ctx context.Context, session sqlx.Session, data *Menu) error
		FindSum(ctx context.Context, sumBuilder squirrel.SelectBuilder, field string) (float64, error)
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder, field string) (int64, error)
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*Menu, error)
		FindPageListByPage(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Menu, error)
		FindPageListByPageWithTotal(ctx context.Context, rowBuilder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Menu, int64, error)
		FindPageListByIdDESC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Menu, error)
		FindPageListByIdASC(ctx context.Context, rowBuilder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Menu, error)
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultMenuModel struct {
		sqlc.CachedConn
		table string
	}

	Menu struct {
		Id                int64          `db:"id"`
		MenuId            int64          `db:"menu_id"`              // 菜单ID
		ParentMenuId      int64          `db:"parent_menu_id"`       // 父菜单ID
		Path              string         `db:"path"`                 // 路由路径
		Name              string         `db:"name"`                 // 组件名
		Component         sql.NullString `db:"component"`            // 组件路径
		Title             string         `db:"title"`                // 菜单名称
		Icon              sql.NullString `db:"icon"`                 // 菜单图标
		ShowBadge         int64          `db:"show_badge"`           // 是否显示徽标
		ShowTextBadge     sql.NullString `db:"show_text_badge"`      // 文本徽标内容
		IsHide            int64          `db:"is_hide"`              // 是否在菜单中隐藏
		IsHideTab         int64          `db:"is_hide_tab"`          // 是否在标签页中隐藏
		Link              sql.NullString `db:"link"`                 // 外部链接
		IsIframe          int64          `db:"is_iframe"`            // 是否为iframe
		KeepAlive         int64          `db:"keep_alive"`           // 是否缓存
		IsInMainContainer int64          `db:"is_in_main_container"` // 是否在主容器中
		CreateTime        time.Time      `db:"create_time"`          // 创建时间
		UpdateTime        time.Time      `db:"update_time"`          // 更新时间
		DeleteTime        sql.NullTime   `db:"delete_time"`          // 删除时间
		DelState          int64          `db:"del_state"`            // 删除状态 0:未删除 1:已删除
	}
)

func newMenuModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMenuModel {
	return &defaultMenuModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`menu`",
	}
}

func (m *defaultMenuModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, menuIdKey)
	return err
}
func (m *defaultMenuModel) FindOne(ctx context.Context, id int64) (*Menu, error) {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, id)
	var resp Menu
	err := m.QueryRowCtx(ctx, &resp, menuIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and del_state = ? limit 1", menuRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) Insert(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error) {
	data.DeleteTime = sql.NullTime{}
	data.DelState = globalkey.DelStateNo
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, menuRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MenuId, data.ParentMenuId, data.Path, data.Name, data.Component, data.Title, data.Icon, data.ShowBadge, data.ShowTextBadge, data.IsHide, data.IsHideTab, data.Link, data.IsIframe, data.KeepAlive, data.IsInMainContainer, data.DeleteTime, data.DelState)
		}
		return conn.ExecCtx(ctx, query, data.MenuId, data.ParentMenuId, data.Path, data.Name, data.Component, data.Title, data.Icon, data.ShowBadge, data.ShowTextBadge, data.IsHide, data.IsHideTab, data.Link, data.IsIframe, data.KeepAlive, data.IsInMainContainer, data.DeleteTime, data.DelState)
	}, menuIdKey)
}

func (m *defaultMenuModel) Update(ctx context.Context, session sqlx.Session, data *Menu) (sql.Result, error) {
	menuIdKey := fmt.Sprintf("%s%v", cacheMenuIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, menuRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.MenuId, data.ParentMenuId, data.Path, data.Name, data.Component, data.Title, data.Icon, data.ShowBadge, data.ShowTextBadge, data.IsHide, data.IsHideTab, data.Link, data.IsIframe, data.KeepAlive, data.IsInMainContainer, data.DeleteTime, data.DelState, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.MenuId, data.ParentMenuId, data.Path, data.Name, data.Component, data.Title, data.Icon, data.ShowBadge, data.ShowTextBadge, data.IsHide, data.IsHideTab, data.Link, data.IsIframe, data.KeepAlive, data.IsInMainContainer, data.DeleteTime, data.DelState, data.Id)
	}, menuIdKey)
}

func (m *defaultMenuModel) DeleteSoft(ctx context.Context, session sqlx.Session, data *Menu) error {
	data.DelState = globalkey.DelStateYes
	data.DeleteTime = sql.NullTime{Time: time.Now(), Valid: true}
	if _, err := m.Update(ctx, session, data); err != nil {
		return errors.Wrapf(errors.New("delete soft failed "), "MenuModel delete err : %+v", err)
	}
	return nil
}

func (m *defaultMenuModel) FindSum(ctx context.Context, builder squirrel.SelectBuilder, field string) (float64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindSum Least One Field"), "FindSum Least One Field")
	}

	builder = builder.Columns("IFNULL(SUM(" + field + "),0)")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp float64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMenuModel) FindCount(ctx context.Context, builder squirrel.SelectBuilder, field string) (int64, error) {

	if len(field) == 0 {
		return 0, errors.Wrapf(errors.New("FindCount Least One Field"), "FindCount Least One Field")
	}

	builder = builder.Columns("COUNT(" + field + ")")

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return 0, err
	}
}

func (m *defaultMenuModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*Menu, error) {

	builder = builder.Columns(menuRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Menu
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindPageListByPage(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Menu, error) {

	builder = builder.Columns(menuRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Menu
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindPageListByPageWithTotal(ctx context.Context, builder squirrel.SelectBuilder, page, pageSize int64, orderBy string) ([]*Menu, int64, error) {

	total, err := m.FindCount(ctx, builder, "id")
	if err != nil {
		return nil, 0, err
	}

	builder = builder.Columns(menuRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	if page < 1 {
		page = 1
	}
	offset := (page - 1) * pageSize

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, total, err
	}

	var resp []*Menu
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, total, nil
	default:
		return nil, total, err
	}
}

func (m *defaultMenuModel) FindPageListByIdDESC(ctx context.Context, builder squirrel.SelectBuilder, preMinId, pageSize int64) ([]*Menu, error) {

	builder = builder.Columns(menuRows)

	if preMinId > 0 {
		builder = builder.Where(" id < ? ", preMinId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id DESC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Menu
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) FindPageListByIdASC(ctx context.Context, builder squirrel.SelectBuilder, preMaxId, pageSize int64) ([]*Menu, error) {

	builder = builder.Columns(menuRows)

	if preMaxId > 0 {
		builder = builder.Where(" id > ? ", preMaxId)
	}

	query, values, err := builder.Where("del_state = ?", globalkey.DelStateNo).OrderBy("id ASC").Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*Menu
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultMenuModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultMenuModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultMenuModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMenuIdPrefix, primary)
}

func (m *defaultMenuModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", menuRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMenuModel) tableName() string {
	return m.table
}
