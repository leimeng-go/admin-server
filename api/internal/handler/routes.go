// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4

package handler

import (
	"net/http"

	auth "admin-server/api/internal/handler/auth"
	entity "admin-server/api/internal/handler/entity"
	menu "admin-server/api/internal/handler/menu"
	role "admin-server/api/internal/handler/role"
	user "admin-server/api/internal/handler/user"
	"admin-server/api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/auth/login",
				Handler: auth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/auth/register",
				Handler: auth.RegisterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/auth/sendVerifyCode",
				Handler: auth.SendVerifyCodeHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/auth/verifyCode",
				Handler: auth.VerifyCodeHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/department/add",
				Handler: entity.AdddepartmentHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/department/delete",
				Handler: entity.DeletedepartmentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/department/list",
				Handler: entity.DepartmentlistHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/department/top",
				Handler: entity.TopdepartmentHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/department/update",
				Handler: entity.UpdatedepartmentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/menu/info",
				Handler: menu.MenuHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/role/add",
				Handler: role.AddroleHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/role/delete",
				Handler: role.DeleteroleHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/role/list",
				Handler: role.RolelistHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/role/update",
				Handler: role.UpdateroleHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/create",
				Handler: user.CreateUserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/info",
				Handler: user.UserHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/user/list",
				Handler: user.GetUserListHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithPrefix("/api/v1"),
	)
}
